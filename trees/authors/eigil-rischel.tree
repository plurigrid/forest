\title{Eigil Fjeldgren Rischel}
\taxon{person}
\meta{institution}{University of Strathclyde}
\meta{position}{PhD Student}
\meta{external}{https://erischel.com}
\import{macros}
\subtree{
  \title{Problems, Interests, Projects}
  \subtree{
    \title{Generalizations of the Krohn-Rhodes theorem}
    \p{
      Consider the category of (discrete time, discrete space) Mealy machines (with distinguished starting state), quotiented by behavioural equivalence - such an equivalence class is the same thing as a function #{X^*\setminus \emptyset \to Y}.
      Note that #{X^*\setminus \emptyset} is the free semigroup on #{X}. These form a monoidal category under composition (wiring the output of one machine into the input of another) and parallel composition.
    }
    \p{
      Given any semigroup #{S}, there is an automaton #{S \to S} which, given input #{s} and state #{s'}, outputs #{ss'} and also writes that as the next state. As a function #{S^*\setminus \emptyset \to S}, this is merely the multiplication of #{S}.
    }
    \p{
      Conversely, given any Mealy machine #{X \to Y}, its \em{transformation semigroup} is the quotient of #{X^*\setminus \emptyset} by the congruence which identifies two sequences if they have the same effect on the machine - that is, for a given initial state, the two sequences leave the machine in the same final state and produce the same output. Write #{S(m)} for the transforamtion semigroup of #{m}
    }
    \p{
      Note that any machine can be "simulated" by the machine associated to its transformation semigroup, by precomposing this associated machine by the inclusion #{X \to X^*\setminus \emptyset / \sim} and postcomposing with the map which takes an element of the transformation semigroup to the output produced by that sequence of inputs. We say #{m | m'}, #{m} divides #{m'}, if #{m'} can simulate #{m} like this. One can check that semigroup #{S} is a subquotient of #{S'} if and only if #{S | S'} as machines.
    }
    \p{
      Given a set of machines #{K}, let #{V(K)} be the monoidal subcategory generated by these machines and the functions. Conversely, let #{K_g(m)} be the set of machines associated to finite simple groups that are subdivisors of its transformation semigroup, and let #{K(m) = K_g(M) \cup \{U\},} where #{U} is the "flip-flop machine" #{\{a,b,0\} \to \{a,b\}} which outputs the last received input from #{a,b}. Then the Krohn-Rhodes theorem states
      \ol{
        \li{Let #{S} be either a finite simple group or a subquotient semigroup of the transformation semigroup of #{U}. Let #{m} be some machine, #{K} a collection of machines so that #{m \in V(K)}, and suppose #{S | S(m)}. Then #{S | S(b)} for some #{b \in K}}
        \li{For any machine #{m}, #{m \in V(K(m))}}
      }
    }
    \p{See eg [wikipedia: Krohn-Rhodes Theory](https://en.wikipedia.org/wiki/Krohn\%E2\%80\%93Rhodes_theory), or \ref{esik-proof-kr-2000} for a proof.}
    \p{
      This is a sort of algebraic classification theory (or decomposition theory) for automata, objects of great interest in categorical cybernetics. It would be very interesting to try and develop versions of this theorem suitable for other monoidal categories.
    }
  }
  \subtree{
    \title{Inferring string diagrams}
    \p{
      There is a large body of work (eg \ref{jacobs-kissinger-zanasi-causal-2018}) indicating that the DAGs of causal inference are "really" string diagrams in a Markov category (i.e with copying and deletion).
      Congruent with this, \ref{fritz-markov-cats-2019} presents conditional independence as a diagrammatic property - a distribution (or kernel) with multivariate codomain exhibits some conditional independence if and only if it rewrites as a string diagram with a special form.
    }
    \p{
      Observe that the methods of causal inference, at least at the elementary level, generally take the form "given these observed conditional (in)dependencies, we can rule out these causal structures (and thereby possibly rule in some alternatives)".
      This is an argument of the form "given that the morphism does/doesn't admit rewritings of these forms, we can rule out/in certain diagram shapes". In fact the project of casting these inferences in purely string diagrammatic terms has already been accomplished by Fritz in \ref{fritz-dsep-2022}. However, it may be possible to apply this idea in other contexts modeled by string diagrams - where we have certain "observable" diagram shapes (corresponding to conditional independences), and attempt to infer from this some information about an unknown underlying diagram shape. For example, it may be possible to use this to study the "agentic structure" of a black-box system, using open games.
    }
  }
  \subtree{
    \title{Formalized Reinforcement Learning}
    \p{
      There should be a theory and practice of reinforcement learning-type algorithms which, given a description of their environment, output not merely a policy but also a proof certifying (a lower bound on) the obtained reward.
    }
  }
  \subtree{
    \title{Atlas of mathematical structures}
    \p{
      It should be possible to build a system which, given a formal definition (say in Lean) of a class of algebraic structure (like groups, rings, [loops](https://ncatlab.org/nlab/show/loop+\%28algebra\%29), etc), searches through a standard library of such structures from the literature and finds the name and existing work on your structure (combined with a simplified syntax for giving such definitions, maybe). Compare the [Online Encyclopedia of Integer Sequences](https://oeis.org/), and the recent collaborative project to classify those algebraic theories axiomatizable by one binary operation and one equation with at most four occurences of the operation ([here](https://terrytao.wordpress.com/2024/10/12/the-equational-theories-project-a-brief-tour/), note that they aim to describe the poset of such structures under implication, not merely the set of equivalence classes).
    }
  }
}
